@model IEnumerable<HOA.Models.Event>
@using System.Globalization

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "HOA - Events";
    var joinedEvents = ViewBag.JoinedEvents as HashSet<int> ?? new HashSet<int>();
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Events - HOA Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="/css/site.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <style>
        .event-card {
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }

            .event-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            }

        .card-img-top {
            height: 200px;
            object-fit: cover;
        }

        .event-date {
            font-size: 0.9rem;
            color: #6c757d;
            font-weight: 500;
        }

        .btn-group-custom {
            gap: 0.25rem;
        }

        .btn-sm-custom {
            padding: 0.375rem 0.75rem;
            font-size: 0.875rem;
            border-radius: 0.375rem;
        }

        .join-btn {
            min-width: 80px;
            transition: all 0.3s ease;
        }

            .join-btn:hover {
                transform: scale(1.05);
            }

        .admin-actions {
            border-top: 1px solid #e9ecef;
            padding-top: 0.75rem;
            margin-top: 0.75rem;
        }

        .user-actions {
            margin-bottom: 0.75rem;
        }
    </style>
</head>

<body>

    <header class="page-header">
        <h1>Upcoming Events</h1>
        <p>Join our community events and stay connected!</p>
    </header>

    <div class="container my-5">
        <div class="d-flex justify-content-between align-items-center mb-3 flex-wrap">
            <form method="get" asp-action="Index" class="input-group w-50">
                <input type="text" name="searchQuery" class="form-control" placeholder="Search by name..." value="@ViewData["SearchQuery"]" />
                <button class="btn btn-outline-secondary" type="submit">Search</button>
            </form>
            @if (User.IsInRole("Admin"))
            {
                <a class="btn btn-primary mt-2 mt-md-0" asp-action="Create">Add new event</a>
            }
        </div>

        
        <a class="btn btn-outline-secondary ms-2 mt-2 mt-sm-0"
           asp-action="Index"
           asp-route-searchQuery="@ViewData["SearchQuery"]"
           asp-route-sortOrder="@(ViewData["SortOrder"]?.ToString() == "asc" ? "desc" : "asc")">
            Sort by Date (@(ViewData["SortOrder"]?.ToString() == "asc" ? "asc" : "desc"))
        </a>
    

        <div class="row g-4">
            @foreach (var item in Model)
            {
                <div class="col-md-4">

                    <div class="card border mb-4" style="background-color: @item.Color; color: white;">

                        @if (!string.IsNullOrEmpty(item.ImagePath))
                        {
                            <img src="@item.ImagePath"
                                 class="card-img-top"
                                 alt="@item.EventName">
                        }

                        <div class="card-body">
                            <h5 class="card-title">@Html.DisplayFor(modelItem => item.EventName)</h5>
                            <p class="card-text">@Html.DisplayFor(modelItem => item.Description)</p>
                            <p class="card-text">
                                <i class="bi bi-geo-alt text-primary"></i>
                                <strong>Location:</strong> @Html.DisplayFor(modelItem => item.Location)
                            </p>
                            <p class="card-text">
                                <i class="bi bi-calendar-event text-primary"></i>
                                <span class="event-date">@item.Date.ToString("dd MMM yyyy - HH:mm")</span>
                            </p>

                            <!-- User Actions (Join/Details/Participants) -->
                            <div class="user-actions">
                                <div class="d-flex flex-wrap gap-2 justify-content-between align-items-center">
                                    <!-- Join/Unjoin Button -->
                                    @{
                                        var isJoined = joinedEvents.Contains(item.Id);
                                    }
                                    <button type="button"
                                            class="btn btn-sm-custom join-btn @(joinedEvents.Contains(item.Id) ? "btn-success" : "btn-outline-primary")"
                                            data-event-id="@item.Id"
                                            data-joined="@(joinedEvents.Contains(item.Id).ToString().ToLower())">
                                        <i class="bi @(joinedEvents.Contains(item.Id) ? "bi-check-circle" : "bi-plus-circle")"></i>
                                        @(joinedEvents.Contains(item.Id) ? "Joined!" : "Join")
                                    </button>

                                    <!-- Details and Participants -->
                                    <div class="d-flex gap-2">
                                        <a class="btn btn-sm-custom btn-info" asp-action="Details" asp-route-id="@item.Id">
                                            <i class="bi bi-info-circle"></i> Details
                                        </a>
                                        <a class="btn btn-sm-custom btn-secondary" asp-action="Participants" asp-route-id="@item.Id">
                                            <i class="bi bi-people"></i> Participants
                                        </a>
                                    </div>
                                </div>
                            </div>

                            <!-- Admin Actions (Edit/Delete) -->
                            @if (User.IsInRole("Admin"))
                            {
                                <div class="admin-actions">
                                    <div class="d-flex gap-2 justify-content-center">
                                        <a class="btn btn-sm-custom btn-warning" asp-action="Edit" asp-route-id="@item.Id">
                                            <i class="bi bi-pencil-square"></i> Edit
                                        </a>
                                        <a class="btn btn-sm-custom btn-danger" asp-action="Delete" asp-route-id="@item.Id">
                                            <i class="bi bi-trash"></i> Delete
                                        </a>
                                    </div>
                                </div>
                            }
                        </div>

                        <!-- Hidden form for anti-forgery token -->
                        <form class="anti-forgery-form" style="display:none;">
                            @Html.AntiForgeryToken()
                        </form>
                    </div>
                </div>
            }
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    @section Scripts {
        <script>
            document.querySelectorAll('.join-btn').forEach(function (btn) {
                btn.addEventListener('click', function (e) {
                    e.preventDefault();
                    var eventId = this.getAttribute('data-event-id');

                    // Get anti-forgery token
                    var token = document.querySelector('.anti-forgery-form input[name="__RequestVerificationToken"]').value;

                    // Create FormData to send the request properly
                    var formData = new FormData();
                    formData.append('eventId', eventId);
                    formData.append('__RequestVerificationToken', token);

                    fetch('/Events/ToggleJoin', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Response:', data);
                        const icon = btn.querySelector('i');
                        if (data.joined) {
                            btn.classList.remove('btn-outline-primary');
                            btn.classList.add('btn-success');
                            btn.innerHTML = '<i class="bi bi-check-circle"></i> Joined!';
                            btn.setAttribute('data-joined', 'true');
                        } else {
                            btn.classList.remove('btn-success');
                            btn.classList.add('btn-outline-primary');
                            btn.innerHTML = '<i class="bi bi-plus-circle"></i> Join';
                            btn.setAttribute('data-joined', 'false');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred. Please try again.');
                    });
                });
            });
        </script>
    }

</body>

</html>